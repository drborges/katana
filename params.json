{"name":"Katana","tagline":"Dependency Injection driven by constructor functions","body":"# Katana [![Build Status](https://travis-ci.org/drborges/katana.svg?branch=master)](https://travis-ci.org/drborges/katana)\r\n\r\nDependency Injection Driven By Constructor Functions\r\n\r\n## Brief Overview\r\n\r\nkatana approaches DI in a fairly simple manner. For each type that needs to be available for injection -- a.k.a `injectable` -- a [constructor function](https://golang.org/doc/effective_go.html#composite_literals) needs to be registered with an instance of `kanata.Injector`.\r\n\r\n```go\r\nfunc NewUserService(depA *DependencyA, depB *DependencyB) *UserService {\r\n\treturn &UserService{depA, depB}\r\n}\r\n```\r\n\r\nOnce a provider is registered the corresponding injectable can be resolved and injected as dependency into other injectable providers, or even into arbitrary functions. Lets see how that translates into code:\r\n\r\n```go\r\n// Get an instance of katana's injector\r\ninjector := katana.New()\r\n\r\n// Register the following instances as injectables\r\ndepA, depB := &DependencyA{}, &DependencyB{}\r\n\r\n// Register a constructor function to provide instances of *UserService\r\ninjector.Provide(depA, depB).ProvideNew(&UserService{}, NewUserService)\r\n\r\n// Grab a new instance of *UserService with all its dependencies injected\r\nvar service *UserService\r\ninjector.Resolve(&service)\r\n```\r\n\r\nKatana will detect and panic upon any eventual `cyclic dependency` when resolving an injectable, providing the cyclic dependency graph so you can easily troubleshoot.\r\n\r\n## Example\r\n\r\nLets say you have the following types each with their own dependencies:\r\n\r\n```go\r\ntype Config struct {\r\n\tDatastoreURL string\r\n\tCacheTTL     int\r\n\tDebug        bool\r\n}\r\n\r\ntype Cache struct {\r\n\tTTL int\r\n}\r\n\r\ntype Datastore struct {\r\n\tCache *Cache\r\n\tURL   string\r\n}\r\n\r\ntype AccountService struct {\r\n\tDatastore *Datastore\r\n}\r\n```\r\n\r\nA constructor function for each type of injectable is created and registered with a new instance of `katana.Injector`\r\n\r\n```go\r\n// Grabs a new instance of katana.Injector\r\ninjector := katana.New()\r\n\r\n// Registers the given instance of Config to be provided as a singleton injectable\r\ninjector.Provide(Config{\r\n\tDatastoreURL: \"https://myawesomestartup.com/db\",\r\n\tCacheTTL:     20000,\r\n})\r\n\r\n// Registers a constructor function that always provides a new instance of *Cache\r\ninjector.ProvideNew(&Cache{}, func(config Config) *Cache {\r\n\treturn &Cache{config.CacheTTL}\r\n})\r\n\r\n// Registers a constructor function that always provides a new instance of *Datastore\r\n// resolving its dependencies -- Config and *Cache -- as part of the process\r\ninjector.ProvideNew(&Datastore{}, func(config Config, cache *Cache) *Datastore {\r\n\treturn &Datastore{cache, config.DatastoreURL}\r\n})\r\n\r\n// Registers a constructor function that lazily provides the same instance of *AccountService\r\n// resolving its dependencies -- *Datastore -- as part of the process.\r\ninjector.ProvideSingleton(&AccountService{}, func(db *Datastore) *AccountService {\r\n\treturn &AccountService{db}\r\n})\r\n```\r\n\r\nFinally you can get instances of the provided `injectables` with all their dependencies -- if any -- resolved:\r\n\r\n```go\r\nvar service1, service2 *AccountService\r\nvar db1, db2 *Datastore\r\nvar cache1, cache2 *Cache\r\nvar config Config\r\n\r\n// Katana allows you to resolve multiple instances on a single \"shot\"\r\n// \r\n// Note that:\r\n// 1. service1 == service2: *AccountService provider is a singleton\r\n// 2. db1 != db2: *Datastore injectable is not singleton\r\n// 3. cache1 != cache2: *Cache is not a singleton\r\n// 4. config will point to the Config instance defined in the previous code block, since it was provided using Injector#Provide method.\r\ninjector.Resolve(&service1, &service2, &db1, &db2, &cache1, &cache2, &config)\r\n```\r\n\r\n# Injecting Interfaces\r\n\r\nIn Go there is no way to pass in types as function arguments and types are derived through reflection from actual instances.\r\n\r\nIn addition to that an instance cannot be instantiated either, which makes things a little trick when writer generic programs like a DI container.\r\n\r\nKatana solution for injecting into interface references might seem a bit strange at first, but you'll get used :)\r\n\r\nLets say we want to provide a particular implementation of `http.ResponseWriter` to be injected as dependency. With `katana` you would do the following:\r\n\r\n```go\r\ninjector.ProvideAs((*http.ResponseWriter)(nil), writer)\r\n```\r\n\r\n`(*http.ResponseWriter)(nil)` is how we tell katana to treat `writer` as a `http.ResponseWriter` rather than its actual underlying implementation `*http.response`.\r\n\r\nWith that whenever a dependency to `http.ResponseWriter` is detected, it will be resolved as that particular `writer` instance.\r\n\r\n# Thread-Safety\r\n\r\nIn order to use `katana` in a `multi-thread` environment you should use a copy of the injector per thread.\r\n\r\nCopies of `katana.Injector` can be created using `Injector.Clone()`. This copy will have all the registered providers of the original injector and every new provider registered in the new copy will not be available to other copies of `katana.Injector`.\r\n\r\n**Note** Singleton providers will still yield the same instances across different threads.\r\n\r\n### Example: HTTP Server\r\n\r\nAssuming we have the injector instance from the example above ^\r\n\r\n```go\r\nhttp.HandleFunc(\"/bar\", func(w http.ResponseWriter, r *http.Request) {\r\n\tvar service *AccountService\r\n\tinjector.Clone().\r\n\t\tProvideAs((*http.ResponseWriter)(nil), w).\r\n\t\tProvide(r).Resolve(&service)\r\n})\r\n\r\nlog.Fatal(http.ListenAndServe(\":8080\", nil))\r\n```\r\n\r\n# Injecting Function Arguments\r\n\r\nKatana also allows you to inject arguments into functions (that is how it resolves the arguments of a injectable provider):\r\n\r\n```go\r\nfetchAllAccounts := injector.Inject(func(srv *AccountService, conf Config) ([]*Account, error) {\r\n\tif conf.Debug {\r\n\t\treturn mocks.Accounts(), nil\r\n\t}\r\n\treturn srv.Accounts()\r\n})\r\n```\r\n\r\n`Injector#Inject` returns a closure holding all the resolved function arguments and when called returns a `katana.Output` with the function returning values.\r\n\r\n```go\r\nif result := fetchAllAccounts(); !result.Empty() {\r\n\taccounts, err := result[0], result[1]\r\n}\r\n```\r\n\r\n# Contributing\r\n\r\nPlease feel free to submit issues, fork the repository and send pull requests!\r\n\r\nWhen submitting an issue, please include a test function that reproduces the issue, that will help a lot to reduce back and forth :~\r\n\r\n# License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Diego da Rocha Borges\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n","google":"UA-66913152-1","note":"Don't delete this file! It's used internally to help with page regeneration."}